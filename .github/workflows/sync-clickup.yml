name: Sync GitHub Projects with ClickUp

on:
  issues:
    types: [opened, edited, deleted, transferred, closed, reopened]
  project_card:
    types: [created, moved]

jobs:
  sync-with-clickup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Sync with ClickUp
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLICKUP_API_KEY: ${{ secrets.CLICKUP_API_KEY }}
          CLICKUP_LIST_ID: ${{ secrets.CLICKUP_LIST_ID }}
          CLICKUP_TEAM_ID: ${{ secrets.CLICKUP_TEAM_ID }}
          GITHUB_CLICKUP_MAPPING: ${{ secrets.CLICKUP_MAPPING }}
        run: |
          python - <<EOF
          import os
          import json
          import requests
          from datetime import datetime

          github_token = os.environ['GITHUB_TOKEN']
          clickup_api_key = os.environ['CLICKUP_API_KEY']
          clickup_list_id = os.environ['CLICKUP_LIST_ID']
          clickup_team_id = os.environ['CLICKUP_TEAM_ID']
          github_clickup_mapping = json.loads(os.environ['GITHUB_CLICKUP_MAPPING'])

          def get_github_issue():
              event_path = os.environ['GITHUB_EVENT_PATH']
              with open(event_path, 'r') as f:
                  event_data = json.load(f)
              return event_data['issue']

          def get_clickup_task_id(issue_number):
              url = f"https://api.clickup.com/api/v2/list/{clickup_list_id}/task"
              headers = {"Authorization": clickup_api_key}
              params = {
                  "include_closed": True,
                  "subtasks": True,
                  "page": 0
              }
              
              all_tasks = []
              while True:
                  response = requests.get(url, headers=headers, params=params)
                  if response.status_code != 200:
                      print(f"Error fetching tasks: {response.status_code}")
                      return None
                  
                  data = response.json()
                  print("here:",data)
                  tasks = data.get('tasks', [])
                  all_tasks.extend(tasks)
                  
                  if len(tasks) < 100:  # Less than 100 tasks returned, we've reached the end
                      break
                  
                  params['page'] += 1  # Move to the next page
              
              # Filter tasks to find the one with matching GitHub issue number
              for task in all_tasks:
                  custom_fields = task.get('custom_fields', [])
                  for field in custom_fields:
                      if field.get('name') == 'GitHub Issue' and field.get('value') == str(issue_number):
                          return task['id']
              
              return None

          def get_clickup_task_id(issue_number):
              url = f"https://api.clickup.com/api/v2/list/{clickup_list_id}/task"
              headers = {"Authorization": clickup_api_key}
              params = {
                  "include_closed": True,
                  "subtasks": True,
                  "page": 0
              }
              
              while True:
                  response = requests.get(url, headers=headers, params=params)
                  if response.status_code != 200:
                      print(f"Error fetching tasks: {response.status_code}")
                      return None
                  
                  data = response.json()
                  tasks = data.get('tasks', [])
                  
                  # Search for the task with matching GitHub issue number
                  for task in tasks:
                      custom_fields = task.get('custom_fields', [])
                      for field in custom_fields:
                          if field.get('name') == 'github_issue' and field.get('value') == str(issue_number):
                              return task['id']
                  
                  # Check if we've reached the last page
                  if data.get('last_page', False):
                      break
                  
                  params['page'] += 1  # Move to the next page
              
              return None  # No matching task found

          def update_clickup_task(task_id, issue):
              url = f"https://api.clickup.com/api/v2/task/{task_id}"
              headers = {
                  "Content-Type": "application/json",
                  "Authorization": clickup_api_key
              }
              assignee_id = github_clickup_mapping.get(issue['user']['login'])
              payload = {
                  "name": issue['title'],
                  "description": issue['body'],
                  "markdown_description": issue['body'],
                  "status": "Complete" if issue['state'] == 'closed' else "Open",
                  "assignees": {"add": [int(assignee_id)]} if assignee_id else {}
              }
              response = requests.put(url, json=payload, headers=headers)
              return response.json()

          def main():
              issue = get_github_issue()
              clickup_task_id = get_clickup_task_id(issue['number'])
              
              if clickup_task_id:
                  print(f"Updating existing ClickUp task: {clickup_task_id}")
                  update_clickup_task(clickup_task_id, issue)
              else:
                  print("Creating new ClickUp task")
                  create_clickup_task(issue)

          if __name__ == "__main__":
              main()
          EOF
